{"version":3,"file":"static/js/53.3a3edd6d.chunk.js","mappings":"qRACMA,EAAU,mCAEHC,EAAW,mCAAG,+GAEAC,EAAAA,EAAAA,IAAA,kEACsCF,IAHtC,cAEjBG,EAFiB,OAKjBC,EAAeD,EAASE,KAAKC,QALZ,kBAMhBF,GANgB,gCAQvBG,QAAQC,IAAR,MARuB,yDAAH,qDAYXC,EAAc,mCAAG,WAAMC,GAAN,kGAEHR,EAAAA,EAAAA,IAAA,6CACiBQ,EADjB,oBACoCV,IAHjC,cAEpBG,EAFoB,OAKpBC,EAAeD,EAASE,KALJ,kBAMnBD,GANmB,gCAQ1BG,QAAQC,IAAR,MAR0B,yDAAH,sDAYdG,EAAa,mCAAG,WAAOD,EAASE,GAAhB,kGAEFV,EAAAA,EAAAA,IAAA,6CACiBQ,EADjB,YAC4BE,EAD5B,oBAC6CZ,IAH3C,cAEnBG,EAFmB,OAKnBC,EAAeD,EAASE,KALL,kBAMlBD,GANkB,gCAQzBG,QAAQC,IAAR,MARyB,yDAAH,wDAYbK,EAAkB,mCAAG,WAAMC,GAAN,gGAEPZ,EAAAA,EAAAA,IAAA,4DACgCF,EADhC,kBACiDc,EADjD,gCAFO,cAExBX,EAFwB,yBAKvBA,EAASE,KAAKC,SALS,gCAO9BC,QAAQC,IAAR,MAP8B,yDAAH,qD,oKCrClBO,EAAiBC,EAAAA,GAAAA,IAAH,uI,SCCdC,EAAe,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACrBC,EAAqED,EAArEC,YAAaC,EAAwDF,EAAxDE,aAAcC,EAA0CH,EAA1CG,MAAOC,EAAmCJ,EAAnCI,aAAcC,EAAqBL,EAArBK,SAAUC,EAAWN,EAAXM,OAElE,OACE,UAACT,EAAD,YACE,0BACE,gBACEU,IAAKN,GAAW,yCAAsCA,GACtDO,IAAI,kBAGR,4BACE,kCAAQL,EAAR,aAAkBD,GAAgBA,EAAaO,MAAM,EAAG,GAAxD,QACA,8CAAmC,GAAfL,GAAmBM,QAAQ,GAA/C,QACA,sCACA,uBAAIL,KACJ,oCACA,8BAAIC,QAAJ,IAAIA,OAAJ,EAAIA,EAAQK,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,aAIjD,ECtBYC,EAAUjB,EAAAA,GAAAA,IAAH,wHAOPkB,EAAWlB,EAAAA,GAAAA,GAAH,gDCqCrB,EAtCyB,WAAO,IAAD,IAC7B,GAAkCmB,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAOjB,EAAP,KAAkBkB,EAAlB,KACQ1B,GAAY2B,EAAAA,EAAAA,MAAZ3B,QACF4B,GAAWC,EAAAA,EAAAA,MACXC,EAAY,oBAAGF,EAASG,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UAU7C,OARAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,qGACCnC,EAAAA,EAAAA,IAAeC,GADhB,OACbmC,EADa,OAEnBT,EAAaS,GAFM,2CAAH,qDAIlBD,GACD,GAAE,CAAClC,KAGF,4BACE,SAAC,KAAD,CAAMoC,GAAIN,EAAV,mCACA,SAACvB,EAAD,CAAcC,UAAWA,KACzB,UAACe,EAAD,YACE,oDACA,2BACE,SAACC,EAAD,WACE,SAAC,KAAD,CAAMY,GAAG,OAAOL,MAAOH,EAASG,MAAhC,qBAIF,SAACP,EAAD,WACE,SAAC,KAAD,CAAMY,GAAG,UAAUL,MAAOH,EAASG,MAAnC,8BAMN,SAAC,KAAD,MAGL,C","sources":["api/fetchMovies.js","components/MovieDetails/MovieDetails.styled.js","components/MovieDetails/MovieDetails.jsx","pages/MovieDetailsPage/MovieDetailsPage.styled.js","pages/MovieDetailsPage/MovieDetailsPage.jsx"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = 'a12b15569070d5f59a588b24befedb0f';\n\nexport const fetchMovies = async () => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n    );\n    const responseData = response.data.results;\n    return responseData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieById = async movieId => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}`\n    );\n    const responseData = response.data;\n    return responseData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieAdd = async (movieId, param) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/${param}?api_key=${API_KEY}`\n    );\n    const responseData = response.data;\n    return responseData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMoviesByQuery = async query => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import styled from \"styled-components\";\n\nexport const PictureWrapper = styled.div`\n  display: flex;\n  padding: 8px 0;\n  gap: 16px;\n  padding-left: 14px;\n  border-bottom: 1px solid black;  \n`;","import PropTypes from 'prop-types';\nimport { PictureWrapper } from './MovieDetails.styled';\n\nexport const MovieDetails = ({ movieById }) => {\n  const { poster_path, release_date, title, vote_average, overview, genres } = movieById;\n\n  return (\n    <PictureWrapper>\n      <div>\n        <img\n          src={poster_path && `https://image.tmdb.org/t/p/w300${poster_path}`}\n          alt=\"No display\"\n        />\n      </div>\n      <div>\n        <h2>{`${title} (${release_date && release_date.slice(0, 4)})`}</h2>\n        <p>{`User score: ${(vote_average * 10).toFixed(0)}%`}</p>\n        <h3>Overview</h3>\n        <p>{overview}</p>\n        <h3>Genres</h3>\n        <p>{genres?.map(genre => genre.name).join(', ')}</p>\n      </div>\n    </PictureWrapper>\n  );\n};\n\nMovieDetails.propTypes = {\n  movieById: PropTypes.object\n}\n","import styled from 'styled-components';\n\nexport const AddInfo = styled.div`\n  gap: 16px;\n  margin-bottom: 16px;\n  padding-left: 14px;\n  border-bottom: 1px solid black;\n`;\n\nexport const InfoItem = styled.li`\n  padding-bottom: 5px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport { Outlet } from 'react-router-dom';\nimport { fetchMovieById } from 'api/fetchMovies';\nimport { MovieDetails } from 'components/MovieDetails/MovieDetails';\nimport { AddInfo, InfoItem } from './MovieDetailsPage.styled';\n\nconst MovieDetailsPage = () => {\n  const [movieById, setMovieById] = useState({});\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/movies';\n\n  useEffect(() => {\n    const getMovieById = async () => {\n      const movie = await fetchMovieById(movieId);\n      setMovieById(movie);\n    };\n    getMovieById();\n  }, [movieId]);\n\n  return (\n    <div>\n      <Link to={backLinkHref}>&#129044; Go back</Link>\n      <MovieDetails movieById={movieById} />\n      <AddInfo>\n        <h4>Additional information</h4>\n        <ul>\n          <InfoItem>\n            <Link to=\"cast\" state={location.state}>\n              Cast\n            </Link>\n          </InfoItem>\n          <InfoItem>\n            <Link to=\"reviews\" state={location.state}>\n              Reviews\n            </Link>\n          </InfoItem>\n        </ul>\n      </AddInfo>\n      <Outlet />\n    </div>\n  );\n};\n\nexport default MovieDetailsPage;\n"],"names":["API_KEY","fetchMovies","axios","response","responseData","data","results","console","log","fetchMovieById","movieId","fetchMovieAdd","param","fetchMoviesByQuery","query","PictureWrapper","styled","MovieDetails","movieById","poster_path","release_date","title","vote_average","overview","genres","src","alt","slice","toFixed","map","genre","name","join","AddInfo","InfoItem","useState","setMovieById","useParams","location","useLocation","backLinkHref","state","from","useEffect","getMovieById","movie","to"],"sourceRoot":""}